{
  "address": "0x3863ce38eB2418aDC08675eB1F3fbeF8804b1c9D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x09850091303d0fd8c0f7404ffd08b4ad4d5fd756b5cec2d87c719a9cba6e4018",
  "receipt": {
    "to": null,
    "from": "0x142e7148B45d89950DC875a8F87f09bd86df932f",
    "contractAddress": "0x3863ce38eB2418aDC08675eB1F3fbeF8804b1c9D",
    "transactionIndex": 5,
    "gasUsed": "848797",
    "logsBloom": "0x
    "blockHash": "0xef099bb6adabbf233e102e6aad6a76a2eac681711344c769bed5ecbcead4c354",
    "transactionHash": "0x09850091303d0fd8c0f7404ffd08b4ad4d5fd756b5cec2d87c719a9cba6e4018",
    "logs": [],
    "blockNumber": 11080909,
    "cumulativeGasUsed": "1227271",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 1,
  "solcInputHash": "b96f5cb6f3721ed0b193ecb9078cf659",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) public addressToAmountFunded;\\n    address[] public funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address public /* immutable */ i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    AggregatorV3Interface priceFeed;\\n    \\n    constructor(address _priceFeed) {\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(_priceFeed);\\n    }\\n\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        addressToAmountFunded[msg.sender] += msg.value;\\n        funders.push(msg.sender);\\n    }\\n    \\n    // function getVersion() public view returns (uint256){\\n        \\n    //     return priceFeed.version();\\n    // }\\n    \\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert NotOwner();\\n        _;\\n    }\\n    \\n    function withdraw() payable onlyOwner public {\\n        for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\\n\\n\",\"keccak256\":\"0x81adf46ee0fb7c026cc26831620fbc0fc3090879dac9e94e28980b722993a033\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        // Rinkeby ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0x56c9378d7789001f472a43948749bf3d65f9767e00851be35f86937c49312de3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610ee9380380610ee98339818101604052810190610032919061011d565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b600060208284031215610133576101326100ba565b5b600061014184828501610108565b91505092915050565b610d90806101596000396000f3fe6080604052600436106100595760003560e01c80633ccfd60b146100725780633e47d6f31461007c5780636b69a592146100b9578063b60d4288146100e4578063dba6335f146100ee578063dc0d3dff1461011957610068565b3661006857610066610156565b005b610070610156565b005b61007a610290565b005b34801561008857600080fd5b506100a3600480360381019061009e9190610742565b6104d2565b6040516100b09190610788565b60405180910390f35b3480156100c557600080fd5b506100ce6104ea565b6040516100db9190610788565b60405180910390f35b6100ec610156565b005b3480156100fa57600080fd5b506101036104f7565b60405161011091906107b2565b60405180910390f35b34801561012557600080fd5b50610140600480360381019061013b91906107f9565b61051d565b60405161014d91906107b2565b60405180910390f35b6802b5e3af16b1880000610195600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461055c90919063ffffffff16565b10156101d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cd90610883565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461022491906108d2565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610317576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103c25760006001828154811061033d5761033c610928565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103ba90610957565b91505061031a565b50600067ffffffffffffffff8111156103de576103dd6109a0565b5b60405190808252806020026020018201604052801561040c5781602001602082028036833780820191505090505b5060019080519060200190610422929190610638565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161044990610a00565b60006040518083038185875af1925050503d8060008114610486576040519150601f19603f3d011682016040523d82523d6000602084013e61048b565b606091505b50509050806104cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c690610a61565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061052d57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061056883610598565b90506000670de0b6b3a764000085836105819190610a81565b61058b9190610b0a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156105e157600080fd5b505afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106199190610bc8565b5050509150506402540be400816106309190610c43565b915050919050565b8280548282559060005260206000209081019282156106b1579160200282015b828111156106b05782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610658565b5b5090506106be91906106c2565b5090565b5b808211156106db5760008160009055506001016106c3565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061070f826106e4565b9050919050565b61071f81610704565b811461072a57600080fd5b50565b60008135905061073c81610716565b92915050565b600060208284031215610758576107576106df565b5b60006107668482850161072d565b91505092915050565b6000819050919050565b6107828161076f565b82525050565b600060208201905061079d6000830184610779565b92915050565b6107ac81610704565b82525050565b60006020820190506107c760008301846107a3565b92915050565b6107d68161076f565b81146107e157600080fd5b50565b6000813590506107f3816107cd565b92915050565b60006020828403121561080f5761080e6106df565b5b600061081d848285016107e4565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b600061086d601b83610826565b915061087882610837565b602082019050919050565b6000602082019050818103600083015261089c81610860565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108dd8261076f565b91506108e88361076f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561091d5761091c6108a3565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006109628261076f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610995576109946108a3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b60006109ea6000836109cf565b91506109f5826109da565b600082019050919050565b6000610a0b826109dd565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610a4b600b83610826565b9150610a5682610a15565b602082019050919050565b60006020820190508181036000830152610a7a81610a3e565b9050919050565b6000610a8c8261076f565b9150610a978361076f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ad057610acf6108a3565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b158261076f565b9150610b208361076f565b925082610b3057610b2f610adb565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b5a81610b3b565b8114610b6557600080fd5b50565b600081519050610b7781610b51565b92915050565b6000819050919050565b610b9081610b7d565b8114610b9b57600080fd5b50565b600081519050610bad81610b87565b92915050565b600081519050610bc2816107cd565b92915050565b600080600080600060a08688031215610be457610be36106df565b5b6000610bf288828901610b68565b9550506020610c0388828901610b9e565b9450506040610c1488828901610bb3565b9350506060610c2588828901610bb3565b9250506080610c3688828901610b68565b9150509295509295909350565b6000610c4e82610b7d565b9150610c5983610b7d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610c9857610c976108a3565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610cd557610cd46108a3565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d1257610d116108a3565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610d4f57610d4e6108a3565b5b82820290509291505056fea264697066735822122037bbbd3fec8d697ebdc363eced8efd9a7f7634648309662616faa43125caadab64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100595760003560e01c80633ccfd60b146100725780633e47d6f31461007c5780636b69a592146100b9578063b60d4288146100e4578063dba6335f146100ee578063dc0d3dff1461011957610068565b3661006857610066610156565b005b610070610156565b005b61007a610290565b005b34801561008857600080fd5b506100a3600480360381019061009e9190610742565b6104d2565b6040516100b09190610788565b60405180910390f35b3480156100c557600080fd5b506100ce6104ea565b6040516100db9190610788565b60405180910390f35b6100ec610156565b005b3480156100fa57600080fd5b506101036104f7565b60405161011091906107b2565b60405180910390f35b34801561012557600080fd5b50610140600480360381019061013b91906107f9565b61051d565b60405161014d91906107b2565b60405180910390f35b6802b5e3af16b1880000610195600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461055c90919063ffffffff16565b10156101d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cd90610883565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461022491906108d2565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610317576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103c25760006001828154811061033d5761033c610928565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103ba90610957565b91505061031a565b50600067ffffffffffffffff8111156103de576103dd6109a0565b5b60405190808252806020026020018201604052801561040c5781602001602082028036833780820191505090505b5060019080519060200190610422929190610638565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161044990610a00565b60006040518083038185875af1925050503d8060008114610486576040519150601f19603f3d011682016040523d82523d6000602084013e61048b565b606091505b50509050806104cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c690610a61565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061052d57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061056883610598565b90506000670de0b6b3a764000085836105819190610a81565b61058b9190610b0a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156105e157600080fd5b505afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106199190610bc8565b5050509150506402540be400816106309190610c43565b915050919050565b8280548282559060005260206000209081019282156106b1579160200282015b828111156106b05782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610658565b5b5090506106be91906106c2565b5090565b5b808211156106db5760008160009055506001016106c3565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061070f826106e4565b9050919050565b61071f81610704565b811461072a57600080fd5b50565b60008135905061073c81610716565b92915050565b600060208284031215610758576107576106df565b5b60006107668482850161072d565b91505092915050565b6000819050919050565b6107828161076f565b82525050565b600060208201905061079d6000830184610779565b92915050565b6107ac81610704565b82525050565b60006020820190506107c760008301846107a3565b92915050565b6107d68161076f565b81146107e157600080fd5b50565b6000813590506107f3816107cd565b92915050565b60006020828403121561080f5761080e6106df565b5b600061081d848285016107e4565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b600061086d601b83610826565b915061087882610837565b602082019050919050565b6000602082019050818103600083015261089c81610860565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108dd8261076f565b91506108e88361076f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561091d5761091c6108a3565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006109628261076f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610995576109946108a3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b60006109ea6000836109cf565b91506109f5826109da565b600082019050919050565b6000610a0b826109dd565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610a4b600b83610826565b9150610a5682610a15565b602082019050919050565b60006020820190508181036000830152610a7a81610a3e565b9050919050565b6000610a8c8261076f565b9150610a978361076f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ad057610acf6108a3565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b158261076f565b9150610b208361076f565b925082610b3057610b2f610adb565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b5a81610b3b565b8114610b6557600080fd5b50565b600081519050610b7781610b51565b92915050565b6000819050919050565b610b9081610b7d565b8114610b9b57600080fd5b50565b600081519050610bad81610b87565b92915050565b600081519050610bc2816107cd565b92915050565b600080600080600060a08688031215610be457610be36106df565b5b6000610bf288828901610b68565b9550506020610c0388828901610b9e565b9450506040610c1488828901610bb3565b9350506060610c2588828901610bb3565b9250506080610c3688828901610b68565b9150509295509295909350565b6000610c4e82610b7d565b9150610c5983610b7d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610c9857610c976108a3565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610cd557610cd46108a3565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d1257610d116108a3565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610d4f57610d4e6108a3565b5b82820290509291505056fea264697066735822122037bbbd3fec8d697ebdc363eced8efd9a7f7634648309662616faa43125caadab64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}